// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-py"
  interface = "asyncio"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_MIGRATION_URL")
}

enum AgentType {
  REACT
  PLANSOLVE
}

enum AgentMemoryAuthorType {
  HUMAN
  AI
}

enum DocumentType {
  TXT
  PDF
  YOUTUBE
}


model User {
  id        String     @id @default(cuid()) @db.VarChar(255)
  email     String     @unique @db.VarChar(255)
  password  String?    @db.VarChar(255)
  name      String?    @db.VarChar(255)
  createdAt DateTime?  @default(now())
  updatedAt DateTime?  @default(now())
  deletedAt DateTime?
  profile   Profile?
  Agent     Agent[]
  ApiToken  ApiToken[]
  Document  Document[]
}

model Profile {
  id       String @id @default(cuid()) @db.VarChar(255)
  userId   String @unique @db.VarChar(255)
  user     User   @relation(fields: [userId], references: [id])
  metadata Json?  @default("{}")

}

model Document {
  id        String       @id @default(cuid()) @db.VarChar(255)
  userId    String       @db.VarChar(255)
  user      User         @relation(fields: [userId], references: [id])
  type      DocumentType @default(TXT)
  url       String       @db.Text()
  name      String
  createdAt DateTime?    @default(now())
  updatedAt DateTime?    @default(now())
  index     Json?
  Agent     Agent[]
}

model Agent {
  id          String        @id @default(cuid()) @db.VarChar(255)
  userId      String        @db.VarChar(255)
  user        User          @relation(fields: [userId], references: [id])
  document    Document?     @relation(fields: [documentId], references: [id], onDelete: Cascade)
  documentId  String?       @db.VarChar(255)
  name        String
  type        AgentType     @default(REACT)
  llm         Json          @default("{ \"provider\": \"openai-chat\", \"model\": \"gpt-3.5-turbo\" }")
  hasMemory   Boolean       @default(false)
  AgentMemory AgentMemory[]
  createdAt   DateTime?     @default(now())
  updatedAt   DateTime?     @default(now())
}

model ApiToken {
  id          String @id @default(cuid()) @db.VarChar(255)
  userId      String @db.VarChar(255)
  user        User   @relation(fields: [userId], references: [id])
  description String @db.VarChar(255)
  token       String
}

model AgentMemory {
  id        String                @id @default(cuid()) @db.VarChar(255)
  agentId   String                @db.VarChar(255)
  agent     Agent                 @relation(fields: [agentId], references: [id], onDelete:Cascade)
  author    AgentMemoryAuthorType @default(HUMAN)
  message   String                @db.Text()
  createdAt DateTime?             @default(now())
  updatedAt DateTime?             @default(now())
  deletedAt DateTime?
}